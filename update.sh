#!/bin/bash

# Claude Code Structured Workflow - Update Script
# Version 2.0.1 - Safely updates workflow without losing custom context
# Run this from the workflow directory to update an existing project installation

set -e

echo "üîÑ Claude Code Structured Workflow v2.0.1 - Update"
echo "=================================================="
echo ""

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Determine project root (parent of this directory)
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo "üìÅ Update Details:"
echo "   Workflow source: $SCRIPT_DIR"
echo "   Project root: $PROJECT_ROOT"
echo ""

# Check if .claude directory exists (indicates existing installation)
if [ ! -d "$PROJECT_ROOT/.claude" ]; then
    echo "‚ùå ERROR: No existing Claude Code workflow installation found!"
    echo ""
    echo "This script is for updating existing installations."
    echo "For fresh installation, run: bash install.sh"
    exit 1
fi

# Check for CLAUDE.md (indicates Phase 0 complete)
if [ ! -f "$PROJECT_ROOT/.claude/CLAUDE.md" ]; then
    echo "‚ùå ERROR: Workflow not properly initialized!"
    echo ""
    echo "CLAUDE.md not found in .claude directory."
    exit 1
fi

# Read current version from existing CLAUDE.md
CURRENT_VERSION=$(grep -m 1 "Version" "$PROJECT_ROOT/.claude/CLAUDE.md" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" || echo "unknown")
NEW_VERSION="2.0.1"

echo "üìä Version Check:"
echo "   Current: v$CURRENT_VERSION"
echo "   New: v$NEW_VERSION"
echo ""

# Create backup timestamp
BACKUP_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_DIR="$PROJECT_ROOT/.claude-backup-$BACKUP_TIMESTAMP"

echo "‚ö†Ô∏è  BACKUP & SAFETY"
echo "=================="
echo ""
echo "Before updating, would you like to create a backup?"
echo "This will preserve your current .claude directory."
echo ""
read -p "Create backup? (y/n) " -n 1 -r BACKUP_CHOICE
echo
if [[ $BACKUP_CHOICE =~ ^[Yy]$ ]]; then
    echo "Creating backup..."
    cp -r "$PROJECT_ROOT/.claude" "$BACKUP_DIR"
    echo "‚úÖ Backup created: $BACKUP_DIR"
    echo ""
fi

echo "üîç CHECKING WHAT WILL BE PRESERVED"
echo "===================================="
echo ""

# Check for custom context
CUSTOM_CONTEXT_COUNT=0
if [ -f "$PROJECT_ROOT/.claude/context/docs/prd.md" ]; then
    echo "‚úÖ PRD.md will be preserved"
    ((CUSTOM_CONTEXT_COUNT++))
fi
if [ -f "$PROJECT_ROOT/.claude/context/docs/architecture.md" ]; then
    echo "‚úÖ architecture.md will be preserved"
    ((CUSTOM_CONTEXT_COUNT++))
fi
if [ -f "$PROJECT_ROOT/.claude/context/docs/decisions.md" ]; then
    echo "‚úÖ decisions.md will be preserved"
    ((CUSTOM_CONTEXT_COUNT++))
fi
if [ -f "$PROJECT_ROOT/.claude/context/docs/manifest.md" ]; then
    echo "‚úÖ manifest.md will be preserved"
    ((CUSTOM_CONTEXT_COUNT++))
fi

# Check for sessions
SESSION_COUNT=$(find "$PROJECT_ROOT/.claude/context/session" -maxdepth 1 -type d -not -name "session" 2>/dev/null | wc -l)
if [ "$SESSION_COUNT" -gt 0 ]; then
    echo "‚úÖ $SESSION_COUNT session folder(s) will be preserved"
fi

# Check for custom agents (non-core)
CUSTOM_AGENTS=$(find "$PROJECT_ROOT/.claude/agents" -maxdepth 1 -name "*.md" -type f ! -name "product-manager.md" ! -name "researcher.md" ! -name "ux-expert.md" ! -name "architect.md" 2>/dev/null | wc -l)
if [ "$CUSTOM_AGENTS" -gt 0 ]; then
    echo "‚úÖ $CUSTOM_AGENTS custom agent(s) will be preserved"
fi

# Check for custom commands
CUSTOM_COMMANDS=$(find "$PROJECT_ROOT/.claude/commands" -maxdepth 1 -name "*.md" -type f ! -name "init-workflow.md" ! -name "work-on.md" ! -name "status.md" ! -name "checkpoint.md" ! -name "pivot.md" ! -name "help-phase.md" 2>/dev/null | wc -l)
if [ "$CUSTOM_COMMANDS" -gt 0 ]; then
    echo "‚úÖ $CUSTOM_COMMANDS custom command(s) will be preserved"
fi

# Check for custom skills
CUSTOM_SKILLS=$(find "$PROJECT_ROOT/.claude/skills" -maxdepth 1 -type d ! -name "facilitation" ! -name "documentation" ! -name "analysis" ! -name "skills" 2>/dev/null | wc -l)
if [ "$CUSTOM_SKILLS" -gt 0 ]; then
    echo "‚úÖ $CUSTOM_SKILLS custom skill(s) will be preserved"
fi

echo ""
echo "üîÑ FILES THAT WILL BE UPDATED"
echo "=============================="
echo ""
echo "Core Infrastructure:"
echo "  ‚Ä¢ .claude/CLAUDE.md (orchestrator)"
echo "  ‚Ä¢ .claude/phases/*.md (all phases)"
echo ""
echo "Core Agents (4):"
echo "  ‚Ä¢ product-manager.md"
echo "  ‚Ä¢ researcher.md"
echo "  ‚Ä¢ ux-expert.md"
echo "  ‚Ä¢ architect.md"
echo ""
echo "Core Commands (6):"
echo "  ‚Ä¢ init-workflow.md"
echo "  ‚Ä¢ work-on.md"
echo "  ‚Ä¢ status.md"
echo "  ‚Ä¢ checkpoint.md"
echo "  ‚Ä¢ pivot.md"
echo "  ‚Ä¢ help-phase.md"
echo ""
echo "Core Skills (3):"
echo "  ‚Ä¢ facilitation/SKILL.md"
echo "  ‚Ä¢ documentation/SKILL.md"
echo "  ‚Ä¢ analysis/SKILL.md"
echo ""
echo "Core Templates (5):"
echo "  ‚Ä¢ subagent-template.md"
echo "  ‚Ä¢ prd-template.md"
echo "  ‚Ä¢ architecture-template.md"
echo "  ‚Ä¢ testing-strategy-template.md"
echo "  ‚Ä¢ work-item-template.md"
echo ""

# Confirm with user
read -p "Proceed with update? (y/n) " -n 1 -r UPDATE_CHOICE
echo
if [[ ! $UPDATE_CHOICE =~ ^[Yy]$ ]]; then
    echo "‚ùå Update cancelled."
    exit 1
fi

echo ""
echo "üîÑ STARTING UPDATE"
echo "=================="
echo ""

# Update orchestrator
if [ -f "$SCRIPT_DIR/orchestrator/CLAUDE.md" ]; then
    cp "$SCRIPT_DIR/orchestrator/CLAUDE.md" "$PROJECT_ROOT/.claude/CLAUDE.md"
    echo "‚úì CLAUDE.md updated"
else
    echo "‚úó ERROR: CLAUDE.md not found in source"
    exit 1
fi

# Update phases
PHASES_UPDATED=0
for phase in phase-0-setup.md phase-1-ideation.md phase-2-design.md phase-3-agent-gen.md phase-4-development.md phase-5-delivery.md; do
    if [ -f "$SCRIPT_DIR/phases/$phase" ]; then
        cp "$SCRIPT_DIR/phases/$phase" "$PROJECT_ROOT/.claude/phases/"
        ((PHASES_UPDATED++))
    fi
done
echo "‚úì Updated $PHASES_UPDATED phase files"

# Update core agents
AGENTS_UPDATED=0
for agent in product-manager.md researcher.md ux-expert.md architect.md; do
    if [ -f "$SCRIPT_DIR/agents/$agent" ]; then
        cp "$SCRIPT_DIR/agents/$agent" "$PROJECT_ROOT/.claude/agents/"
        ((AGENTS_UPDATED++))
    fi
done
echo "‚úì Updated $AGENTS_UPDATED core agents"

# Update core commands
COMMANDS_UPDATED=0
for cmd in init-workflow.md work-on.md status.md checkpoint.md pivot.md help-phase.md; do
    if [ -f "$SCRIPT_DIR/commands/$cmd" ]; then
        cp "$SCRIPT_DIR/commands/$cmd" "$PROJECT_ROOT/.claude/commands/"
        ((COMMANDS_UPDATED++))
    fi
done
echo "‚úì Updated $COMMANDS_UPDATED core commands"

# Update core skills
SKILLS_UPDATED=0
for skill in facilitation documentation analysis; do
    if [ -f "$SCRIPT_DIR/skills/$skill/SKILL.md" ]; then
        cp "$SCRIPT_DIR/skills/$skill/SKILL.md" "$PROJECT_ROOT/.claude/skills/$skill/SKILL.md"
        ((SKILLS_UPDATED++))
    fi
done
echo "‚úì Updated $SKILLS_UPDATED core skills"

# Update core templates
TEMPLATES_UPDATED=0
for template in subagent-template.md note-template.md prd-template.md architecture-template.md testing-strategy-template.md work-item-template.md; do
    if [ -f "$SCRIPT_DIR/templates/$template" ]; then
        cp "$SCRIPT_DIR/templates/$template" "$PROJECT_ROOT/.claude/context/templates/"
        ((TEMPLATES_UPDATED++))
    fi
done
echo "‚úì Updated $TEMPLATES_UPDATED templates"

echo ""
echo "‚úÖ UPDATE COMPLETE!"
echo ""

echo "üìä Summary:"
echo "==========="
echo "‚úì Orchestrator updated (v$NEW_VERSION)"
echo "‚úì $PHASES_UPDATED phases updated"
echo "‚úì $AGENTS_UPDATED core agents updated"
echo "‚úì $COMMANDS_UPDATED core commands updated"
echo "‚úì $SKILLS_UPDATED core skills updated"
echo "‚úì $TEMPLATES_UPDATED templates updated"
echo ""

if [ "$CUSTOM_CONTEXT_COUNT" -gt 0 ]; then
    echo "‚úì Your custom context preserved ($CUSTOM_CONTEXT_COUNT docs)"
fi
if [ "$SESSION_COUNT" -gt 0 ]; then
    echo "‚úì Your $SESSION_COUNT session folder(s) preserved"
fi
if [ "$CUSTOM_AGENTS" -gt 0 ]; then
    echo "‚úì Your $CUSTOM_AGENTS custom agent(s) preserved"
fi
if [ "$CUSTOM_COMMANDS" -gt 0 ]; then
    echo "‚úì Your $CUSTOM_COMMANDS custom command(s) preserved"
fi
if [ "$CUSTOM_SKILLS" -gt 0 ]; then
    echo "‚úì Your $CUSTOM_SKILLS custom skill(s) preserved"
fi

echo ""
echo "üéâ Workflow Updated Successfully!"
echo ""

if [[ $BACKUP_CHOICE =~ ^[Yy]$ ]]; then
    echo "üì¶ Backup available at: $BACKUP_DIR"
    echo "   (You can delete this after verifying the update works)"
    echo ""
fi

echo "üìñ What's next:"
echo "  1. Open Claude Code in this project"
echo "  2. The new features/updates are available immediately"
echo "  3. Your existing context and work are safe and unchanged"
echo ""
echo "üîß If you need to rollback:"
if [[ $BACKUP_CHOICE =~ ^[Yy]$ ]]; then
    echo "  1. Delete current .claude directory"
    echo "  2. Rename backup back: mv $BACKUP_DIR .claude"
else
    echo "  Note: No automatic backup was created"
    echo "  You can restore from git: git checkout .claude/"
fi
echo ""
